/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Superset Charts API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AddChartToFavorites200,
  Chart,
  ChartCreatePayload,
  ChartUpdatePayload,
  ChartsListResponse,
  DeleteChart200,
  GetChartsParams,
  RemoveChartFromFavorites200,
} from './types';

import { customInstance } from '../api/mutator';

/**
 * @summary Get list of charts
 */
export const getCharts = (params?: GetChartsParams, signal?: AbortSignal) =>
  customInstance<ChartsListResponse>({
    url: `/api/v1/chart/`,
    method: 'GET',
    params,
    signal,
  });

export const getGetChartsQueryKey = (params?: GetChartsParams) =>
  [`/api/v1/chart/`, ...(params ? [params] : [])] as const;

export const getGetChartsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCharts>>,
  TError = unknown,
>(
  params?: GetChartsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCharts>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChartsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCharts>>> = ({
    signal,
  }) => getCharts(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCharts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetChartsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharts>>
>;
export type GetChartsQueryError = unknown;

/**
 * @summary Get list of charts
 */

export function useGetCharts<
  TData = Awaited<ReturnType<typeof getCharts>>,
  TError = unknown,
>(
  params?: GetChartsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCharts>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetChartsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create new chart
 */
export const createChart = (
  chartCreatePayload: ChartCreatePayload,
  signal?: AbortSignal,
) =>
  customInstance<Chart>({
    url: `/api/v1/chart/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: chartCreatePayload,
    signal,
  });

export const getCreateChartMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createChart>>,
    TError,
    { data: ChartCreatePayload },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createChart>>,
  TError,
  { data: ChartCreatePayload },
  TContext
> => {
  const mutationKey = ['createChart'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createChart>>,
    { data: ChartCreatePayload }
  > = props => {
    const { data } = props ?? {};

    return createChart(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateChartMutationResult = NonNullable<
  Awaited<ReturnType<typeof createChart>>
>;
export type CreateChartMutationBody = ChartCreatePayload;
export type CreateChartMutationError = unknown;

/**
 * @summary Create new chart
 */
export const useCreateChart = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createChart>>,
    TError,
    { data: ChartCreatePayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createChart>>,
  TError,
  { data: ChartCreatePayload },
  TContext
> => {
  const mutationOptions = getCreateChartMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get chart by ID
 */
export const getChart = (pk: number, signal?: AbortSignal) =>
  customInstance<Chart>({
    url: `/api/v1/chart/${pk}`,
    method: 'GET',
    signal,
  });

export const getGetChartQueryKey = (pk?: number) =>
  [`/api/v1/chart/${pk}`] as const;

export const getGetChartQueryOptions = <
  TData = Awaited<ReturnType<typeof getChart>>,
  TError = unknown,
>(
  pk: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getChart>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChartQueryKey(pk);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChart>>> = ({
    signal,
  }) => getChart(pk, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!pk,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getChart>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetChartQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChart>>
>;
export type GetChartQueryError = unknown;

/**
 * @summary Get chart by ID
 */

export function useGetChart<
  TData = Awaited<ReturnType<typeof getChart>>,
  TError = unknown,
>(
  pk: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getChart>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetChartQueryOptions(pk, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update chart
 */
export const updateChart = (
  pk: number,
  chartUpdatePayload: ChartUpdatePayload,
) =>
  customInstance<Chart>({
    url: `/api/v1/chart/${pk}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: chartUpdatePayload,
  });

export const getUpdateChartMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateChart>>,
    TError,
    { pk: number; data: ChartUpdatePayload },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateChart>>,
  TError,
  { pk: number; data: ChartUpdatePayload },
  TContext
> => {
  const mutationKey = ['updateChart'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateChart>>,
    { pk: number; data: ChartUpdatePayload }
  > = props => {
    const { pk, data } = props ?? {};

    return updateChart(pk, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateChartMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateChart>>
>;
export type UpdateChartMutationBody = ChartUpdatePayload;
export type UpdateChartMutationError = unknown;

/**
 * @summary Update chart
 */
export const useUpdateChart = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateChart>>,
    TError,
    { pk: number; data: ChartUpdatePayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateChart>>,
  TError,
  { pk: number; data: ChartUpdatePayload },
  TContext
> => {
  const mutationOptions = getUpdateChartMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete chart
 */
export const deleteChart = (pk: number) =>
  customInstance<DeleteChart200>({
    url: `/api/v1/chart/${pk}`,
    method: 'DELETE',
  });

export const getDeleteChartMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteChart>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteChart>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationKey = ['deleteChart'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteChart>>,
    { pk: number }
  > = props => {
    const { pk } = props ?? {};

    return deleteChart(pk);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteChartMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteChart>>
>;

export type DeleteChartMutationError = unknown;

/**
 * @summary Delete chart
 */
export const useDeleteChart = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteChart>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteChart>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationOptions = getDeleteChartMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Add chart to favorites
 */
export const addChartToFavorites = (pk: number, signal?: AbortSignal) =>
  customInstance<AddChartToFavorites200>({
    url: `/api/v1/chart/${pk}/favorites/`,
    method: 'POST',
    signal,
  });

export const getAddChartToFavoritesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addChartToFavorites>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addChartToFavorites>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationKey = ['addChartToFavorites'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addChartToFavorites>>,
    { pk: number }
  > = props => {
    const { pk } = props ?? {};

    return addChartToFavorites(pk);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddChartToFavoritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof addChartToFavorites>>
>;

export type AddChartToFavoritesMutationError = unknown;

/**
 * @summary Add chart to favorites
 */
export const useAddChartToFavorites = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addChartToFavorites>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addChartToFavorites>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationOptions = getAddChartToFavoritesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Remove chart from favorites
 */
export const removeChartFromFavorites = (pk: number) =>
  customInstance<RemoveChartFromFavorites200>({
    url: `/api/v1/chart/${pk}/favorites/`,
    method: 'DELETE',
  });

export const getRemoveChartFromFavoritesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeChartFromFavorites>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeChartFromFavorites>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationKey = ['removeChartFromFavorites'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeChartFromFavorites>>,
    { pk: number }
  > = props => {
    const { pk } = props ?? {};

    return removeChartFromFavorites(pk);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveChartFromFavoritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeChartFromFavorites>>
>;

export type RemoveChartFromFavoritesMutationError = unknown;

/**
 * @summary Remove chart from favorites
 */
export const useRemoveChartFromFavorites = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeChartFromFavorites>>,
    TError,
    { pk: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof removeChartFromFavorites>>,
  TError,
  { pk: number },
  TContext
> => {
  const mutationOptions = getRemoveChartFromFavoritesMutationOptions(options);

  return useMutation(mutationOptions);
};
